name: Deploy API to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'src/GalaxyWiki.API/**'
      - '.github/workflows/api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      
      - name: Restore dependencies
        run: dotnet restore src/GalaxyWiki.API/GalaxyWiki.API.csproj
      
      - name: Build
        run: dotnet publish src/GalaxyWiki.API/GalaxyWiki.API.csproj -c Release -o ./publish
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Generate environment config
        run: |
          cat > ./publish/appsettings.Production.json << EOL
          {
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "AllowedHosts": "*",
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ secrets.DB_URL }};Port=${{ secrets.DB_HOST }};Database=${{ secrets.DB_NAME }};Username=${{ secrets.DB_USERNAME }};Password=${{ secrets.DB_PASSWORD }}"
            },
            "Kestrel": {
              "Endpoints": {
                "Http": {
                  "Url": "http://localhost:5000"
                }
              }
            }
          }
          EOL

      - name: Create systemd service file
        run: |
          cat > galaxywiki-api.service << EOL
          [Unit]
          Description=GalaxyWiki API Service
          After=network.target

          [Service]
          WorkingDirectory=/var/www/galaxywiki-api
          ExecStart=/usr/bin/dotnet /var/www/galaxywiki-api/GalaxyWiki.API.dll
          Restart=always
          RestartSec=10
          User=ec2-user
          Environment=ASPNETCORE_ENVIRONMENT=Production
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false

          [Install]
          WantedBy=multi-user.target
          EOL

      - name: Deploy to EC2
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Create deployment package
          tar -czf api-deployment.tar.gz -C ./publish .
          
          # Create backup of current deployment (for rollback)
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST "
            if [ -d /var/www/galaxywiki-api ]; then
              sudo cp -r /var/www/galaxywiki-api /var/www/galaxywiki-api-backup
            else
              sudo mkdir -p /var/www/galaxywiki-api
            fi
          "
          
          # Create deployment directory on EC2
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST "mkdir -p ~/api-deploy"
          
          # Transfer files
          scp -o StrictHostKeyChecking=no -i private_key.pem api-deployment.tar.gz $EC2_USERNAME@$EC2_HOST:~/api-deploy/
          scp -o StrictHostKeyChecking=no -i private_key.pem galaxywiki-api.service $EC2_USERNAME@$EC2_HOST:~/api-deploy/
          
          # Deploy the application with error handling
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST "
            set -e
            cd ~/api-deploy &&
            tar -xzf api-deployment.tar.gz -C . &&
            sudo systemctl stop galaxywiki-api.service || true &&
            sudo cp -r ./* /var/www/galaxywiki-api/ &&
            sudo systemctl restart galaxywiki-api.service
          "
          
          rm -f private_key.pem 