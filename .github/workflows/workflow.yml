name: "GalaxyWiki Deployment Pipeline"

on:
  push:
    branches:
      - main
      - tevlen-prod

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      ec2host: ${{ steps.tf_outputs.outputs.ec2host }}
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::958933916692:role/gh-actions-role
          aws-region: eu-west-1
    
      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DB_PASSWORD, DB_PASSWORD

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Create terraform.tfvars
        run: |
          PASSWORD=$(echo '${{ env.DB_PASSWORD }}' | sed 's/.*:"//;s/".*//')
          echo 'db_password = "'$PASSWORD'"' > terraform.tfvars

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw database_endpoint)" >> $GITHUB_OUTPUT
          echo "ec2host=$(terraform output -raw ec2_host)" >> $GITHUB_OUTPUT

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.203

      - name: Run Unit Tests
        run: dotnet test
        working-directory: src/GalaxyWiki.Tests
          
  build-api:
    name: Build API
    runs-on: ubuntu-latest
    needs: 
      - terraform
    #   - unit-tests
    
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 9.0
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.203

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::958933916692:role/gh-actions-role
          aws-region: eu-west-1

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DB_USERNAME, DB_USERNAME
            DB_PASSWORD, DB_PASSWORD
            GOOGLE_CLIENT_SECRET, GOOGLE_CLIENT_SECRET
            GOOGLE_CLIENT_ID, GOOGLE_CLIENT_ID
            EC2_PRIV_KEY, EC2_PRIV_KEY

      - name: Generate .env file
        working-directory: src/GalaxyWiki.API
        run: |
          echo "CLIENT_ID=${{ env.GOOGLE_CLIENT_ID }}" > .env
          echo "CLIENT_SECRET=${{ env.GOOGLE_CLIENT_SECRET }}" >> .env
          echo "DB_CONNECTION_STRING=Host=${{ needs.terraform.outputs.dbhost }};Port=5432;Database=galaxy;Username=${{ env.DB_USERNAME }};Password=${{ env.DB_PASSWORD }};" >> .env
          echo "REDIRECT_URI=https://${{ needs.terraform.outputs.ec2host }}/" >> .env

      - name: Generate appsettings.Production.json
        working-directory: src/GalaxyWiki.API
        run: |
          cat > appsettings.Production.json << EOF
          {
            "ConnectionStrings": {
              "DefaultConnection": "Host=${{ needs.terraform.outputs.dbhost }};Port=5432;Database=galaxy;Username=${{ env.DB_USERNAME }};Password=${{ env.DB_PASSWORD }}"
            },
            "Logging": {
              "LogLevel": {
                "Default": "Information",
                "Microsoft.AspNetCore": "Warning"
              }
            },
            "AllowedHosts": "*"
          }
          EOF

      - name: Write private key
        run: |
          # Extract the key value from the JSON response and decode any escaped characters
          PRIVATE_KEY=$(echo '${{ env.EC2_PRIV_KEY }}' | sed 's/^{.*:"//;s/"}$//' | sed 's/\\n/\n/g')
          echo -e "$PRIVATE_KEY" > galaxywiki-key.pem
          chmod 600 galaxywiki-key.pem
          # Debug - check key format (but don't print the actual key)
          head -n 1 galaxywiki-key.pem
          echo "Key size: $(wc -c < galaxywiki-key.pem) bytes"

      - name: Check AWS CLI version
        run: |
          aws --version
          echo "Using pre-installed AWS CLI"

      - name: Get EC2 instance ID
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=dns-name,Values=${{ needs.terraform.outputs.ec2host }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Instance ID: $INSTANCE_ID"
      
      - name: Verify SSM connectivity
        run: |
          # Get instance ID using DNS name
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=dns-name,Values=${{ needs.terraform.outputs.ec2host }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)
          
          echo "Instance ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          
          # Check if instance is SSM managed
          echo "Checking SSM status..."
          aws ssm describe-instance-information --filters "Key=InstanceIds,Values=$INSTANCE_ID"
          
          # Wait for SSM agent to be online (up to 60 seconds)
          echo "Waiting for SSM agent to be fully online..."
          sleep 60

      - name: Install Docker on EC2 via SSM (Simplified)
        run: |
          # Use a simplified command first to test SSM connectivity
          CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=['echo \"Testing SSM connectivity\"']" \
            --query "Command.CommandId" \
            --output text)
            
          echo "Simple Command ID: $CMD_ID"
          
          # Wait a moment for command to process
          sleep 15
          
          # Check status of the simple command
          aws ssm get-command-invocation \
            --command-id "$CMD_ID" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "Status"
          
          # Now try the actual Docker installation
          DOCKER_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=['sudo dnf update -y && sudo dnf install docker -y && sudo systemctl enable docker && sudo systemctl start docker']" \
            --query "Command.CommandId" \
            --output text)
          
          echo "Docker Command ID: $DOCKER_CMD_ID"
          
          # Wait for the command to complete (with longer timeout)
          echo "Waiting for Docker installation to complete (this may take several minutes)..."
          sleep 120
          
          # Check status
          aws ssm get-command-invocation \
            --command-id "$DOCKER_CMD_ID" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "Status"

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << EOF
          FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base
          WORKDIR /app
          EXPOSE 80
          EXPOSE 443

          FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build
          WORKDIR /src
          COPY ["src/GalaxyWiki.API/GalaxyWiki.API.csproj", "GalaxyWiki.API/"]
          COPY ["src/GalaxyWiki.Core/GalaxyWiki.Core.csproj", "GalaxyWiki.Core/"]
          RUN dotnet restore "GalaxyWiki.API/GalaxyWiki.API.csproj"
          COPY src/ .
          WORKDIR "/src/GalaxyWiki.API"
          RUN dotnet build "GalaxyWiki.API.csproj" -c Release -o /app/build

          FROM build AS publish
          RUN dotnet publish "GalaxyWiki.API.csproj" -c Release -o /app/publish

          FROM base AS final
          WORKDIR /app
          COPY --from=publish /app/publish .
          ENTRYPOINT ["dotnet", "GalaxyWiki.API.dll"]
          EOF

      - name: Build the Docker image
        run: |
          docker build -t galaxywiki-api-image -f Dockerfile .

      - name: Save Docker image as an artifact
        run: |
          docker save galaxywiki-api-image | gzip > galaxywiki-api-image.tar.gz

      - name: Upload Docker image to S3
        run: |
          # Create a temporary S3 bucket or use existing one
          BUCKET_NAME="galaxywiki-artifacts"
          aws s3api head-bucket --bucket $BUCKET_NAME || aws s3 mb s3://$BUCKET_NAME
          
          # Upload the Docker image to S3
          aws s3 cp galaxywiki-api-image.tar.gz s3://$BUCKET_NAME/
          
          echo "Docker image uploaded to S3://$BUCKET_NAME/galaxywiki-api-image.tar.gz"

      - name: Deploy Docker image via SSM (Simplified)
        run: |
          # Command to download from S3 and deploy - break it into smaller steps
          echo "Starting deployment process..."
          
          # Step 1: Download the Docker image from S3
          DOWNLOAD_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=['sudo aws s3 cp s3://galaxywiki-artifacts/galaxywiki-api-image.tar.gz /tmp/ && echo \"Download completed\"']" \
            --query "Command.CommandId" \
            --output text)
          
          echo "Download Command ID: $DOWNLOAD_CMD_ID"
          sleep 60
          
          # Check status of download command
          aws ssm get-command-invocation \
            --command-id "$DOWNLOAD_CMD_ID" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "Status"

          # Create a script file for the Docker commands
          cat > docker_commands.sh << 'EOF'
          cd /tmp
          sudo docker system prune --force
          sudo gunzip -c galaxywiki-api-image.tar.gz | sudo docker load
          sudo docker rm -f galaxywiki-api-container || true
          sudo docker run -d \
            -e CLIENT_ID='CLIENT_ID_VALUE' \
            -e CLIENT_SECRET='CLIENT_SECRET_VALUE' \
            -e DB_CONNECTION_STRING='DB_CONNECTION_VALUE' \
            -e REDIRECT_URI='http://localhost:5000/' \
            -e API_URL='API_URL_VALUE' \
            -e ASPNETCORE_URLS="http://0.0.0.0:80;https://0.0.0.0:443" \
            -p 80:80 -p 443:443 \
            --name galaxywiki-api-container \
            galaxywiki-api-image
          EOF

          # Replace placeholders with actual values
          sed -i "s|CLIENT_ID_VALUE|${{ env.GOOGLE_CLIENT_ID }}|g" docker_commands.sh
          sed -i "s|CLIENT_SECRET_VALUE|${{ env.GOOGLE_CLIENT_SECRET }}|g" docker_commands.sh
          sed -i "s|DB_CONNECTION_VALUE|Host=${{ needs.terraform.outputs.dbhost }};Port=5432;Database=galaxy;Username=${{ env.DB_USERNAME }};Password=${{ env.DB_PASSWORD }};|g" docker_commands.sh
          sed -i "s|API_URL_VALUE|http://${{ needs.terraform.outputs.ec2host }}|g" docker_commands.sh
          
          # Upload the script to S3
          aws s3 cp docker_commands.sh s3://galaxywiki-artifacts/docker_commands.sh
          
          # Step 2: Execute the deployment script
          DOCKER_CMD_ID=$(aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=["sudo aws s3 cp s3://galaxywiki-artifacts/docker_commands.sh /tmp/ && sudo chmod +x /tmp/docker_commands.sh && sudo /tmp/docker_commands.sh"]' \
            --query "Command.CommandId" \
            --output text)
          
          echo "Docker Deployment Command ID: $DOCKER_CMD_ID"
          
          # Wait for deployment to complete (with longer timeout)
          echo "Waiting for Docker deployment to complete (this may take several minutes)..."
          sleep 180
          
          # Check status
          aws ssm get-command-invocation \
            --command-id "$DOCKER_CMD_ID" \
            --instance-id "${{ env.INSTANCE_ID }}" \
            --query "Status"

  flyway:
    needs:
      - terraform
      - build-api
    permissions:
      id-token: write
      contents: read
    name: Flyway Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::958933916692:role/gh-actions-role
          aws-region: eu-west-1
      
      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            DB_USERNAME, DB_USERNAME
            DB_PASSWORD, DB_PASSWORD

      - name: Run Flyway migrations
        run: |
          echo "Running Flyway migrations..."
          # Print Flyway version
          docker run --rm flyway/flyway:latest -v
          
          echo "Attempting database connection..."
          docker run --rm \
          -v $(pwd):/flyway/sql \
          flyway/flyway:latest \
          -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -connectRetries=3 \
          -connectRetriesInterval=10 \
          info

          echo "Running migrations..."
          docker run --rm \
          -v $(pwd):/flyway/sql \
          flyway/flyway:latest \
          -url=jdbc:postgresql://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
          -user=${{ secrets.DB_USERNAME }} \
          -password=${{ secrets.DB_PASSWORD }} \
          -connectRetries=3 \
          -connectRetriesInterval=10 \
          -locations=filesystem:/flyway/sql/Migrations \
          migrate