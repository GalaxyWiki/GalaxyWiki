name: Deploy API to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'src/GalaxyWiki.API/**'
      - '.github/workflows/deploy-api.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'
      
      - name: Restore dependencies
        run: dotnet restore src/GalaxyWiki.API/GalaxyWiki.API.csproj
      
      - name: Build
        run: dotnet publish src/GalaxyWiki.API/GalaxyWiki.API.csproj -c Release -o ./publish
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Create deployment package
          tar -czf api-deployment.tar.gz -C ./publish .
          
          # Create deployment directory on EC2
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST "mkdir -p ~/api-deploy"
          
          # Transfer files
          scp -o StrictHostKeyChecking=no -i private_key.pem api-deployment.tar.gz $EC2_USERNAME@$EC2_HOST:~/api-deploy/
          
          # Deploy the application
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USERNAME@$EC2_HOST "
            cd ~/api-deploy &&
            tar -xzf api-deployment.tar.gz -C . &&
            sudo systemctl stop galaxywiki-api.service || true &&
            sudo cp -r ./* /var/www/galaxywiki-api/ &&
            sudo systemctl restart galaxywiki-api.service
          "
          
          rm -f private_key.pem 